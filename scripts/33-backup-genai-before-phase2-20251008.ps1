o#!/usr/bin/env pwsh

<#
.SYNOPSIS
Backup s√©curis√© structure GenAI existante avant Phase 2

.DESCRIPTION  
Script de sauvegarde compl√®te du r√©pertoire MyIA.AI.Notebooks/GenAI
avant impl√©mentation de l'architecture modulaire Phase 2.
Pr√©serve tous les assets critiques : notebooks, configurations, data.

.PARAMETER Force
Force la cr√©ation du backup m√™me si un existe d√©j√†

.EXAMPLE
.\33-backup-genai-before-phase2-20251008.ps1
.\33-backup-genai-before-phase2-20251008.ps1 -Force
#>

[CmdletBinding()]
param(
    [switch]$Force
)

$ErrorActionPreference = "Stop"

Write-Host "üîÑ BACKUP GENAI AVANT PHASE 2" -ForegroundColor Cyan
Write-Host "===============================" -ForegroundColor Cyan

$BackupTimestamp = Get-Date -Format 'yyyyMMdd_HHmmss'
$SourcePath = "MyIA.AI.Notebooks/GenAI"
$BackupPath = "MyIA.AI.Notebooks/GenAI_BACKUP_PHASE2_$BackupTimestamp"

# V√©rification existence source
if (-not (Test-Path $SourcePath)) {
    Write-Host "‚ùå Source non trouv√©e: $SourcePath" -ForegroundColor Red
    exit 1
}

# V√©rification backup existant
if ((Test-Path $BackupPath) -and -not $Force) {
    Write-Host "‚ö†Ô∏è Backup existe d√©j√†: $BackupPath" -ForegroundColor Yellow
    Write-Host "üí° Utilisez -Force pour √©craser" -ForegroundColor Yellow
    exit 0
}

try {
    Write-Host "üìÅ Source: $SourcePath" -ForegroundColor Green
    Write-Host "üíæ Backup: $BackupPath" -ForegroundColor Green
    
    # Cr√©ation backup complet
    Copy-Item -Path $SourcePath -Destination $BackupPath -Recurse -Force
    
    # Inventaire
    $Items = Get-ChildItem -Path $BackupPath -Recurse | Measure-Object
    Write-Host "üìä √âl√©ments sauvegard√©s: $($Items.Count)" -ForegroundColor Yellow
    
    # V√©rification assets critiques
    $CriticalAssets = @(
        "DMC_colors.json",
        "img2img_cross_stitch_pattern_maker.ipynb",
        ".env.example",
        "SemanticKernel",
        "EPF"
    )
    
    Write-Host "üîç Assets critiques:" -ForegroundColor Yellow
    foreach ($asset in $CriticalAssets) {
        $assetPath = Join-Path $BackupPath $asset
        if (Test-Path $assetPath) {
            Write-Host "  ‚úÖ $asset" -ForegroundColor Green
        } else {
            Write-Host "  ‚ö†Ô∏è $asset (optionnel)" -ForegroundColor Yellow
        }
    }
    
    # Cr√©ation fichier manifest
    $Manifest = @{
        backup_timestamp = $BackupTimestamp
        source_path = $SourcePath
        backup_path = $BackupPath
        total_items = $Items.Count
        critical_assets = $CriticalAssets
        created_by = "Phase 2.1 Implementation"
    }
    
    $ManifestPath = Join-Path $BackupPath "BACKUP_MANIFEST.json"
    $Manifest | ConvertTo-Json -Depth 3 | Set-Content -Path $ManifestPath -Encoding UTF8
    
    Write-Host "‚úÖ BACKUP COMPL√âT√â AVEC SUCC√àS" -ForegroundColor Green
    Write-Host "üìÑ Manifest: $ManifestPath" -ForegroundColor Cyan
    
} catch {
    Write-Host "‚ùå ERREUR BACKUP: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}