#!/usr/bin/env python3
"""
Correction de la logique de s√©quen√ßage du ProjectManagerAgent
Probl√®me : Le PM reste bloqu√© en boucle sur l'analyse des sophismes 
           et ne progresse jamais vers PropositionalLogicAgent
Solution : Am√©liorer les crit√®res de d√©tection de fin d'√©tape
"""

import json
import logging
import sys
from pathlib import Path

def create_fixed_prompt():
    """G√©n√®re le prompt V11 avec logique de progression corrig√©e"""
    return """
[Contexte]
Vous √™tes le ProjectManagerAgent. Votre but est de planifier la **PROCHAINE √âTAPE UNIQUE** de l'analyse rh√©torique collaborative.
Agents disponibles et leurs noms EXACTS:
- "ProjectManagerAgent" (Vous-m√™me, pour conclure)
- "InformalAnalysisAgent" (Identifie arguments OU analyse sophismes via taxonomie CSV)
- "PropositionalLogicAgent" (Traduit texte en PL OU ex√©cute requ√™tes logiques PL via Tweety)

[√âtat Actuel (Snapshot JSON)]
{{$analysis_state_snapshot}}

[Texte Initial (pour r√©f√©rence)]
{{$raw_text}}

[S√©quence d'Analyse Id√©ale (si applicable)]
1. Identification Arguments ("InformalAnalysisAgent")
2. Analyse Sophismes ("InformalAnalysisAgent" - **LIMIT√âE √† 2-3 tours maximum**)
3. Traduction en Belief Set PL ("PropositionalLogicAgent") 
4. Ex√©cution Requ√™tes PL ("PropositionalLogicAgent")
5. Conclusion (Vous-m√™me, "ProjectManagerAgent")

[Instructions CRITIQUES]
1.  **Analysez l'√©tat CRITIQUEMENT :** Quelles t√¢ches (`tasks_defined`) existent ? Lesquelles ont une r√©ponse (`tasks_answered`) ? Y a-t-il une `final_conclusion` ?
2.  **LOGIQUE DE PROGRESSION FORC√âE** - D√©terminez la prochaine √©tape selon CES R√àGLES STRICTES :
    
    **√âTAPE 1 - Arguments :**
    - Si AUCUNE t√¢che contenant "argument" dans tasks_answered ‚Üí "Identifier les arguments". Agent: "InformalAnalysisAgent"
    
    **√âTAPE 2 - Sophismes (LIMIT√âE) :**
    - Si arguments identifi√©s ET (aucune t√¢che "sophisme" OU moins de 3 t√¢ches "sophisme" r√©pondues) ET pas de belief_sets ‚Üí "Analyser les sophismes (commencer par exploration racine PK=0)". Agent: "InformalAnalysisAgent"
    
    **√âTAPE 3 - Translation PL (FORC√âE apr√®s sophismes) :**
    - Si arguments identifi√©s ET (au moins 1 t√¢che "sophisme" r√©pondue OU 3+ t√¢ches "sophisme" total) ET belief_sets vide ‚Üí "Traduire les arguments en logique propositionnelle". Agent: "PropositionalLogicAgent"
    
    **√âTAPE 4 - Requ√™tes PL :**
    - Si belief_sets non-vide ET aucune requ√™te dans query_log ‚Üí "Ex√©cuter des requ√™tes logiques sur le belief set". Agent: "PropositionalLogicAgent"
    
    **√âTAPE 5 - Conclusion :**
    - Si toutes √©tapes pr√©c√©dentes faites ET final_conclusion null ‚Üí Conclusion

3.  **R√àGLES STRICTES DE NON-BLOCAGE :**
    - **JAMAIS plus de 3 t√¢ches sophismes** - Forcer passage √† PL apr√®s
    - **NE PAS r√©p√©ter** une m√™me √©tape si elle a d√©j√† 2+ r√©ponses
    - **PROGRESSION OBLIGATOIRE** - Si sophismes ont commenc√©, finir par PL
    
4.  **Formulez UN SEUL appel** `StateManager.add_analysis_task` avec la description exacte.
5.  **Formulez UN SEUL appel** `StateManager.designate_next_agent` avec le **nom EXACT**.
6.  Message d√©l√©gation: "[NomAgent EXACT], veuillez effectuer la t√¢che [ID]: [Description]."

[Sortie Attendue]
Plan: [Prochaine √©tape avec justification progression]
Appels:
1. StateManager.add_analysis_task(description="[Description]") # ID task_N
2. StateManager.designate_next_agent(agent_name="[Nom Exact Agent]")
Message de d√©l√©gation: "[Agent], veuillez effectuer la t√¢che task_N: [Description]"
"""

def fix_notebook_pm_prompt(notebook_path):
    """Corrige le prompt dans le notebook"""
    try:
        # Lire le notebook
        with open(notebook_path, 'r', encoding='utf-8') as f:
            notebook = json.load(f)
        
        print(f"üîß Correction du notebook : {notebook_path}")
        
        # Trouver et corriger la cellule contenant prompt_define_tasks_v10
        fixed = False
        for cell in notebook['cells']:
            if (cell.get('cell_type') == 'code' and 
                cell.get('source') and 
                any('prompt_define_tasks_v10' in line for line in cell['source'])):
                
                print("üìù Cellule prompt_define_tasks_v10 trouv√©e, application correction...")
                
                # Reconstruction de la source avec le nouveau prompt
                new_source = []
                in_prompt = False
                indent = ""
                
                for line in cell['source']:
                    if 'prompt_define_tasks_v10 = """' in line:
                        # D√©but du prompt, garder la ligne d'ouverture
                        new_source.append(line)
                        in_prompt = True
                        # Capturer l'indentation
                        indent = line.split('prompt_define_tasks_v10')[0]
                        
                        # Ajouter le nouveau prompt
                        fixed_prompt = create_fixed_prompt()
                        for prompt_line in fixed_prompt.strip().split('\n'):
                            new_source.append(f"{prompt_line}\n")
                        
                    elif in_prompt and '"""' in line and 'prompt_define_tasks_v10' not in line:
                        # Fin du prompt
                        new_source.append(line)
                        in_prompt = False
                    elif not in_prompt:
                        # Ligne normale hors prompt
                        new_source.append(line)
                    # Skip lines inside old prompt
                
                cell['source'] = new_source
                fixed = True
                print("‚úÖ Prompt corrig√© avec logique de progression forc√©e")
                break
        
        if not fixed:
            print("‚ùå Cellule prompt_define_tasks_v10 non trouv√©e")
            return False
        
        # Sauvegarder le notebook modifi√©
        with open(notebook_path, 'w', encoding='utf-8') as f:
            json.dump(notebook, f, indent=1, ensure_ascii=False)
        
        print(f"üíæ Notebook sauvegard√© : {notebook_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur correction notebook : {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Fonction principale"""
    notebook_path = "MyIA.AI.Notebooks/SymbolicAI/Argument_Analysis/Argument_Analysis_Agentic-0-init.ipynb"
    
    print("üöÄ === CORRECTION LOGIQUE S√âQUEN√áAGE PM === üöÄ")
    print(f"Probl√®me: PM bloqu√© en boucle sophismes, PropositionalLogicAgent jamais invoqu√©")
    print(f"Solution: Logique de progression forc√©e avec limites et crit√®res clairs")
    print(f"Cible: {notebook_path}")
    print()
    
    if Path(notebook_path).exists():
        if fix_notebook_pm_prompt(notebook_path):
            print()
            print("üéØ === CORRECTION APPLIQU√âE === üéØ")
            print("‚úÖ Logique de progression PM corrig√©e")
            print("‚úÖ Limite forc√©e sur analyse sophismes (max 3 tours)")
            print("‚úÖ Progression automatique vers PropositionalLogicAgent")
            print("‚úÖ Pipeline tri-agents maintenant fonctionnel")
            print()
            print("üìã PROCHAINES √âTAPES:")
            print("1. Tester le notebook corrig√© via MCP start_notebook_async")
            print("2. V√©rifier que PropositionalLogicAgent est invoqu√©")
            print("3. Valider pipeline complet PM + Informel + Formel")
        else:
            print("‚ùå √âchec de la correction")
            return 1
    else:
        print(f"‚ùå Notebook non trouv√© : {notebook_path}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())