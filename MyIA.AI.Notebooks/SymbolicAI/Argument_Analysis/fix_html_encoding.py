#!/usr/bin/env python3
"""
Script de correction d'encodage HTML pour SymbolicAI Argument Analysis
Corrige les entit√©s HTML qui cassent le parsing XML dans PropositionalLogicAgent
"""

import html
import re
import logging
from pathlib import Path

def setup_logging():
    """Configure le logging pour le script."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s [%(levelname)s] %(message)s',
        datefmt='%H:%M:%S'
    )
    return logging.getLogger("HTMLEncodingFix")

def decode_html_entities(text: str) -> str:
    """D√©code les entit√©s HTML dans un texte."""
    if not text:
        return text
    
    # D√©coder les entit√©s HTML standard
    decoded = html.unescape(text)
    
    # Corrections sp√©cifiques suppl√©mentaires si n√©cessaire
    replacements = {
        '&#x27;': "'",  # Apostrophe
        '&#39;': "'",   # Apostrophe alternative
        '&quot;': '"',  # Guillemets
        '&amp;': '&',   # Esperluette
        '&lt;': '<',    # Plus petit que
        '&gt;': '>',    # Plus grand que
    }
    
    for entity, replacement in replacements.items():
        decoded = decoded.replace(entity, replacement)
    
    return decoded

def create_text_sanitizer_function() -> str:
    """Cr√©e une fonction Python pour sanitiser le texte."""
    return '''
def sanitize_text_for_xml(text: str) -> str:
    """
    Sanitise un texte pour √©viter les erreurs de parsing XML.
    D√©code les entit√©s HTML et nettoie les caract√®res probl√©matiques.
    """
    import html
    import re
    
    if not text:
        return text
    
    # D√©coder les entit√©s HTML
    sanitized = html.unescape(text)
    
    # Corrections sp√©cifiques
    replacements = {
        '&#x27;': "'",
        '&#39;': "'", 
        '&quot;': '"',
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
    }
    
    for entity, replacement in replacements.items():
        sanitized = sanitized.replace(entity, replacement)
    
    # Supprimer les caract√®res de contr√¥le qui peuvent poser probl√®me
    sanitized = re.sub(r'[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]', '', sanitized)
    
    return sanitized
'''

def main():
    """Fonction principale du script."""
    logger = setup_logging()
    logger.info("üîß === CORRECTION ENCODAGE HTML POUR ARGUMENT ANALYSIS ===")
    
    # Cr√©er le fichier de fonction sanitizer
    sanitizer_path = Path("text_sanitizer.py")
    
    try:
        with open(sanitizer_path, 'w', encoding='utf-8') as f:
            f.write(create_text_sanitizer_function())
        
        logger.info(f"‚úÖ Fonction sanitizer cr√©√©e: {sanitizer_path}")
        
        # Test de la fonction
        test_text = "D&#x27;un c√¥t√©, les r√©seaux sociaux permettent de rester en contact avec nos proches."
        sanitized = decode_html_entities(test_text)
        
        logger.info(f"üìã Test d'encodage:")
        logger.info(f"   Avant: {test_text}")
        logger.info(f"   Apr√®s: {sanitized}")
        
        if "&#x27;" not in sanitized and "'" in sanitized:
            logger.info("‚úÖ D√©codage HTML op√©rationnel !")
        else:
            logger.warning("‚ö†Ô∏è D√©codage HTML peut-√™tre incomplet")
        
        logger.info("üìù Instructions d'int√©gration:")
        logger.info("   1. Importer: from text_sanitizer import sanitize_text_for_xml")
        logger.info("   2. Utiliser: clean_text = sanitize_text_for_xml(raw_text)")
        logger.info("   3. Appliquer avant tout parsing XML dans PropositionalLogicAgent")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation du sanitizer: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\\nüéâ Correction d'encodage HTML cr√©√©e avec succ√®s !")
    else:
        print("\\n‚ùå √âchec cr√©ation correction d'encodage")